---
- name: Kubernetes Deployment Playbook
  hosts: localhost
  tasks:
    - name: Run the creation.py script locally
      ansible.builtin.command: "python creation.py"
      register: creation_output
      failed_when: "'Error' in creation_output.stderr"
      changed_when: "'Created' in creation_output.stdout"

    - name: Debug output from creation.py
      ansible.builtin.debug:
        var: creation_output

- name: Copy deployment and namespace files to remote using scp
  hosts: remote_machine
  vars:
    config_file_path: "./config.yml"
  tasks:
    - name: Ensure ~/deployments directory exists on remote
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/deployments"
        state: directory
        mode: "0755"

    - name: Ensure ~/namespace directory exists on remote
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/namespace"
        state: directory
        mode: "0755"

    - name: Copy deployments directory to remote using scp
      ansible.builtin.command:
        cmd: "scp -r ./deployments {{ ansible_user }}@{{ inventory_hostname }}:{{ ansible_env.HOME }}/deployments/"
      register: scp_deployments
      failed_when: scp_deployments.rc != 0
      delegate_to: localhost

    - name: Copy namespace directory to remote using scp
      ansible.builtin.command:
        cmd: "scp -r ./namespace {{ ansible_user }}@{{ inventory_hostname }}:{{ ansible_env.HOME }}/namespace/"
      register: scp_namespace
      failed_when: scp_namespace.rc != 0
      delegate_to: localhost

    - name: Apply Kubernetes namespace from ~/namespace
      ansible.builtin.shell: |
        kubectl apply -f {{ ansible_env.HOME }}/namespace
      register: kubectl_apply_namespace
      failed_when: "'Error' in kubectl_apply_namespace.stderr"
      ignore_errors: no

    - name: Wait 30 seconds before applying deployments
      ansible.builtin.pause:
        seconds: 30

    - name: Apply Kubernetes deployments from ~/deployments
      ansible.builtin.shell: |
        kubectl apply -f {{ ansible_env.HOME }}/deployments --recursive
      register: kubectl_apply_deployments
      failed_when: "'Error' in kubectl_apply_deployments.stderr"
      ignore_errors: no

    - name: Retrieve external IPs for LoadBalancer services
      ansible.builtin.shell: |
        kubectl get services -n {{ item }} --field-selector=status.loadBalancer.ingress[0].ip!= -o jsonpath="{.items[*]['metadata.name', 'status.loadBalancer.ingress[0].ip', 'spec.ports[*].port']}" | tr ' ' '\n' | sed 'N;s/\n/:/'
      register: external_ips
      with_sequence: start=0 end={{ environments | int - 1 }}
      loop_control:
        loop_var: item
      when: item is defined

    - name: Print external IPs for LoadBalancer services
      debug:
        msg: "Namespace: {{ item.item }}, Service: {{ item.stdout_lines[0] }}, IP:Port: {{ item.stdout_lines[1] }}"
      loop: "{{ external_ips.results }}"
      when: item.stdout_lines | length > 1
