---
- name: Kubernetes Deployment Playbook
  hosts: localhost
  tasks:
    - name: Run the creation.py script locally
      ansible.builtin.command: "python creation.py"
      register: creation_output
      failed_when: "'Error' in creation_output.stderr"
      changed_when: "'Created' in creation_output.stdout"

    - name: Debug output from creation.py
      ansible.builtin.debug:
        var: creation_output

- name: Copy deployment and namespace files to remote using scp
  hosts: remote_machine
  vars:
    config_file_path: "./config.yml"
  tasks:
    - name: Ensure ~/deployments directory exists on remote
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/deployments"
        state: directory
        mode: "0755"

    - name: Ensure ~/namespace directory exists on remote
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/namespace"
        state: directory
        mode: "0755"

    - name: Copy deployments directory to remote using scp
      ansible.builtin.command:
        cmd: "scp -r ./deployments {{ ansible_user }}@{{ inventory_hostname }}:{{ ansible_env.HOME }}/deployments/"
      register: scp_deployments
      failed_when: scp_deployments.rc != 0
      delegate_to: localhost

    - name: Copy namespace directory to remote using scp
      ansible.builtin.command:
        cmd: "scp -r ./namespace {{ ansible_user }}@{{ inventory_hostname }}:{{ ansible_env.HOME }}/namespace/"
      register: scp_namespace
      failed_when: scp_namespace.rc != 0
      delegate_to: localhost

    - name: Apply Kubernetes namespace from ~/namespace
      ansible.builtin.shell: |
        kubectl apply -f {{ ansible_env.HOME }}/namespace
      register: kubectl_apply_namespace
      failed_when: "'Error' in kubectl_apply_namespace.stderr"
      ignore_errors: no

    - name: Wait 30 seconds before applying deployments
      ansible.builtin.pause:
        seconds: 30

    - name: Apply Kubernetes deployments from ~/deployments
      ansible.builtin.shell: |
        kubectl apply -f {{ ansible_env.HOME }}/deployments --recursive
      register: kubectl_apply_deployments
      failed_when: "'Error' in kubectl_apply_deployments.stderr"
      ignore_errors: no

    - name: Give pods a minute to install and setup things
      ansible.builtin.pause:
        seconds: 75

- name: Extract Services, Names, Specs, and Unique Namespaces
  hosts: remote_machine
  gather_facts: no
  tasks:
    - name: Run kubectl command to get services
      command: kubectl get services -A -o json
      register: kubectl_output

    - name: Save output as JSON to local machine
      copy:
        content: "{{ kubectl_output.stdout }}"
        dest: ./services_output.json

- name: Test
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Read JSON file and extract service info
      shell: |
        jq -c '
        .items[] |
        select(.metadata.namespace | test("^practice-namespace-[0-9]+$")) |
        {
          namespace: .metadata.namespace,
          name: .metadata.name,
          type: .spec.type,
          ip: (
            if .spec.type == "ClusterIP" then
              .spec.clusterIP
            elif .spec.type == "LoadBalancer" then
              .status.loadBalancer.ingress[0].ip
            else
              null
            end
          ),
          selector: .spec.selector
        }' services_output.json
      register: service_info

    - name: Debug service_info output
      debug:
        var: service_info.stdout_lines

    - name: Debug the command being run
      debug:
        msg: 'Running command: kubectl get pods -n {{ item.namespace }} --selector="app={{ item.selector.app }}" -o jsonpath=''{.items[*].metadata.name}'''
      loop: "{{ service_info.stdout_lines | map('from_json') | list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Get pod names for each LoadBalancer service and update service_info
      shell: |
        kubectl get pods -n {{ item.namespace }} --selector="app={{ item.selector.app }}" -o jsonpath='{.items[*].metadata.name}'
      register: pod_names
      loop: "{{ service_info.stdout_lines | map('from_json') | list }}"
      loop_control:
        label: "{{ item.name }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Combine service info with pod names
      set_fact:
        service_info_combined: "{{ service_info_combined | default([]) + [{'ip': item.ip, 'name': item.name, 'namespace': item.namespace, 'type': item.type, 'podname': (pod_names.results[item_index].stdout if item_index < pod_names.results | length else 'No pod found')}] }}"
      loop: "{{ service_info.stdout_lines | map('from_json') | list }}"
      loop_control:
        index_var: item_index

    - name: Debug combined service information with pod names
      debug:
        var: service_info_combined

    - name: Ensure keys directory exists
      file:
        path: ./keys
        state: directory
        mode: "0700"

    - name: Grab private key from "jumpboxes"
      shell: |
        kubectl exec {{ item.podname }} -n {{ item.namespace }} -- sh -c 'cat /root/.ssh/id_rsa; printf "\n\n"'
      loop: "{{ service_info_combined }}"
      when: item.type == 'LoadBalancer'
      register: loadbalancer_output

    - name: Debug
      debug:
        var: loadbalancer_output

    - name: Save each private key to a local file
      copy:
        content: "{{ item.stdout }}"
        dest: "keys/root_{{ item.item.ip }}_key"
        mode: "0600"
      loop: "{{ loadbalancer_output.results }}"
      when: item.stdout is defined

    - name: Find all files keys
      find:
        paths: ./keys # replace with your target directory
        file_type: file
      register: found_files

    - name: Add newline to the end of each file
      lineinfile:
        path: "{{ item.path }}"
        line: ""
        state: present
      loop: "{{ found_files.files }}"
      when: found_files.matched > 0
